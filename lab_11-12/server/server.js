const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();

const app = express();
const PORT = 62448;

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB");
  })
  .catch((err) => {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", err.message);
  });

// Middleware
app.use(cors());
app.use(express.json());

// –ú–æ–¥–µ–ª—å MongoDB
const productSchema = new mongoose.Schema({
  image_link: String, // –ó–∞–º—ñ–Ω–∞ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  name: String,
  description: String,
  price: Number,
  is_rented: Boolean,
  type: String,
});

const Product = mongoose.model("Product", productSchema, "products_catalog");

// –¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get("/", (req, res) => {
  res.send("–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! üü¢");
});

app.get("/api/products", async (req, res) => {
    try {
      const { type, minPrice, maxPrice, searchQuery } = req.query;
  
      console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:", { type, minPrice, maxPrice, searchQuery });
  
      const filter = {};
  
      if (type && type !== "all") {
        filter.type = type;
      }
  
      if (minPrice || maxPrice) {
        filter.price = {
          ...(minPrice ? { $gte: Number(minPrice) } : {}),
          ...(maxPrice ? { $lte: Number(maxPrice) } : {}),
        };
      }
  
      if (searchQuery) {
        filter.$or = [
          { name: { $regex: searchQuery, $options: "i" } },
          { description: { $regex: searchQuery, $options: "i" } },
        ];
      }
  
      console.log("–§—ñ–ª—å—Ç—Ä –∑–∞–ø–∏—Ç—É –¥–æ MongoDB:", filter);
  
      const products = await Product.find(filter);
  
      res.status(200).json(products);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:", error);
      res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
  });
  
  

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É is_rented
app.put("/api/products/:_id", async (req, res) => {
  try {
    const { _id } = req.params; // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è _id
    const { is_rented } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
    const product = await Product.findById(_id);
    if (!product) {
      return res.status(404).json({ message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è is_rented
    product.is_rented = is_rented;
    const updatedProduct = await product.save();

    res.status(200).json(updatedProduct);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ id
app.get("/api/products/:productId", async (req, res) => {
  try {
    const product = await Product.findById(req.params.productId);
    if (!product) {
      return res.status(404).json({ message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.status(200).json(product); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
  const selectedPort = server.address().port;
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${selectedPort}`);
});
